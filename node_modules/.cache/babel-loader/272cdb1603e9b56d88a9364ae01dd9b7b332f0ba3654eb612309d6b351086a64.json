{"ast":null,"code":"const cors = require('cors');\nimport * as web3 from '@solana/web3.js';\nfunction hexToUint8Array(hexString, length) {\n  if (hexString.length !== length * 2) {\n    throw new Error(`Invalid hex string length. Expected ${length * 2} characters.`);\n  }\n  const byteArray = new Uint8Array(length);\n  for (let i = 0, j = 0; i < hexString.length; i += 2, j++) {\n    byteArray[j] = parseInt(hexString.slice(i, i + 2), 16);\n  }\n  return byteArray;\n}\nexport const createTransaction = async (msg, addr, sig) => {\n  const message = `\\x19Ethereum Signed Message:\\n${msg.length}${msg}`;\n  const messageBuffer = Buffer.from(message, \"utf8\");\n  const ethAddress = hexToUint8Array(addr.slice(2), 20);\n  const signature = hexToUint8Array(sig.slice(2, -2), 64);\n  const recoveryId = parseInt(sig.slice(-2), 16);\n  const example1 = {\n    ethAddress: ethAddress,\n    message: messageBuffer,\n    signature: signature,\n    recoveryId: recoveryId - 27,\n    instructionIndex: 0\n  };\n  //connection to devnet\n  const connection = new web3.Connection(\"https://api.devnet.solana.com\", \"confirmed\");\n  const sender = web3.Keypair.fromSecretKey(Uint8Array.from([98, 74, 162, 26, 34, 99, 60, 20, 71, 237, 28, 176, 152, 127, 176, 102, 204, 31, 224, 148, 72, 127, 255, 253, 17, 91, 255, 82, 72, 162, 96, 131, 115, 147, 61, 73, 32, 136, 6, 71, 192, 85, 35, 243, 231, 134, 174, 121, 66, 241, 177, 139, 248, 89, 178, 248, 89, 57, 145, 19, 233, 117, 10, 3]));\n  const payer = new web3.PublicKey(\"5aMGztMuSVPAp4nm6vrkU25BAho6gGxpWHnnaKZfiUHP\");\n  const instruction = web3.Secp256k1Program.createInstructionWithEthAddress(example1);\n  const transaction = new web3.Transaction();\n  transaction.add(instruction);\n  transaction.add(new web3.TransactionInstruction({\n    data: messageBuffer,\n    keys: [\n      // { \n      //   pubkey: sender.publicKey, \n      //   isSigner: true, \n      //   isWritable: false\n      // },\n      // {\n      //   pubkey: payer,\n      //   isSigner: true,\n      //   isWritable: false,\n      // }\n    ],\n    programId: new web3.PublicKey(\"BhEq6GCv279xqKAgRKD2GiKA3Fw4sV3ozx9XKK9GAihX\")\n  }));\n  transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  transaction.feePayer = payer;\n  transaction.sign(sender);\n  console.log(\"transaction\", transaction);\n  const serializeConfig = {\n    requireAllSignatures: false,\n    verifySignatures: true\n  };\n  const base64Transaction = transaction.serialize(serializeConfig).toString('base64');\n  const serverUrl = 'http://localhost:8080/transaction';\n\n  // Gửi giao dịch đã ký đến server\n  const response = await fetch(serverUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      transaction: base64Transaction\n    })\n  });\n\n  // Xử lý phản hồi từ server\n  if (response.ok) {\n    console.log('Giao dịch đã được gửi thành công');\n  } else {\n    console.error('Lỗi:', response.statusText);\n  }\n\n  // convert response to transaction signature\n  const transactionSignature = await response.json();\n  console.log('transactionSignature', transactionSignature);\n\n  // wait for the transaction from the server to be confirmed\n  await connection.confirmTransaction(transactionSignature);\n  return transaction;\n};","map":{"version":3,"names":["cors","require","web3","hexToUint8Array","hexString","length","Error","byteArray","Uint8Array","i","j","parseInt","slice","createTransaction","msg","addr","sig","message","messageBuffer","Buffer","from","ethAddress","signature","recoveryId","example1","instructionIndex","connection","Connection","sender","Keypair","fromSecretKey","payer","PublicKey","instruction","Secp256k1Program","createInstructionWithEthAddress","transaction","Transaction","add","TransactionInstruction","data","keys","programId","recentBlockhash","getLatestBlockhash","blockhash","feePayer","sign","console","log","serializeConfig","requireAllSignatures","verifySignatures","base64Transaction","serialize","toString","serverUrl","response","fetch","method","headers","body","JSON","stringify","ok","error","statusText","transactionSignature","json","confirmTransaction"],"sources":["/home/katherinee/Desktop/solana/module 1/react-metamask-ethers/src/sendMessage.ts"],"sourcesContent":["const cors = require('cors');\nimport * as web3 from '@solana/web3.js';\n\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n    ethAddress: Buffer | Uint8Array | Array<number> | string;\n    message: Buffer | Uint8Array | Array<number>;\n    signature: Buffer | Uint8Array | Array<number>;\n    recoveryId: number;\n    instructionIndex?: number;\n  };\n\nfunction hexToUint8Array(hexString: string, length: number): Uint8Array {\nif (hexString.length !== length * 2) {\n    throw new Error(\n    `Invalid hex string length. Expected ${length * 2} characters.`\n    );\n}\nconst byteArray = new Uint8Array(length);\nfor (let i = 0, j = 0; i < hexString.length; i += 2, j++) {\n    byteArray[j] = parseInt(hexString.slice(i, i + 2), 16);\n}\nreturn byteArray;\n}\n\nexport const createTransaction = async (msg: string, addr: string, sig: string) => {\n\n    const message = `\\x19Ethereum Signed Message:\\n${msg.length}${msg}`;\n    const messageBuffer = Buffer.from(message, \"utf8\");\n    \n    const ethAddress = hexToUint8Array(addr.slice(2), 20);\n    const signature = hexToUint8Array(sig.slice(2, -2), 64);\n    const recoveryId = parseInt(sig.slice(-2), 16);\n    \n    const example1: CreateSecp256k1InstructionWithEthAddressParams = {\n      ethAddress: ethAddress,\n      message: messageBuffer,\n      signature: signature,\n      recoveryId: recoveryId-27,\n      instructionIndex: 0,\n    };\n    //connection to devnet\n    const connection = new web3.Connection(\"https://api.devnet.solana.com\", \"confirmed\");\n\n    const sender = web3.Keypair.fromSecretKey(\n      Uint8Array.from([98,74,162,26,34,99,60,20,71,237,28,176,152,127,176,102,204,31,224,148,72,127,255,253,17,91,255,82,72,162,96,131,115,147,61,73,32,136,6,71,192,85,35,243,231,134,174,121,66,241,177,139,248,89,178,248,89,57,145,19,233,117,10,3])\n    );\n\n    const payer =  new web3.PublicKey(\"5aMGztMuSVPAp4nm6vrkU25BAho6gGxpWHnnaKZfiUHP\");\n\n    const instruction =\n      web3.Secp256k1Program.createInstructionWithEthAddress(example1);\n\n\n    const transaction = new web3.Transaction();\n\n    transaction.add(instruction);\n    \n    transaction.add(\n      new web3.TransactionInstruction({\n        data: messageBuffer,\n        keys: [\n          // { \n          //   pubkey: sender.publicKey, \n          //   isSigner: true, \n          //   isWritable: false\n          // },\n          // {\n          //   pubkey: payer,\n          //   isSigner: true,\n          //   isWritable: false,\n          // }\n        ],\n        programId: new web3.PublicKey(\"BhEq6GCv279xqKAgRKD2GiKA3Fw4sV3ozx9XKK9GAihX\"),\n      })\n    );\n\n    transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n    transaction.feePayer = payer;\n    transaction.sign(sender);\n    \n    console.log(\"transaction\", transaction);\n    \n    type SerializeConfig= {\n        requireAllSignatures?: boolean;\n        verifySignatures?: boolean;\n    }\n\n    const serializeConfig: SerializeConfig = {\n        requireAllSignatures: false,\n        verifySignatures: true,\n    }\n    const base64Transaction = transaction.serialize(serializeConfig).toString('base64');\n    \n    const serverUrl = 'http://localhost:8080/transaction';\n\n    // Gửi giao dịch đã ký đến server\n    const response = await fetch(serverUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ transaction: base64Transaction }),\n    });\n\n    // Xử lý phản hồi từ server\n    if (response.ok) {\n      console.log('Giao dịch đã được gửi thành công');\n    } else {\n      console.error('Lỗi:', response.statusText);\n    }\n\n    // convert response to transaction signature\n    const transactionSignature = await response.json();\n\n    console.log('transactionSignature', transactionSignature);\n\n    // wait for the transaction from the server to be confirmed\n    await connection.confirmTransaction(transactionSignature);\n\n    return transaction;\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}